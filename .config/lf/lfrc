# jga lf config file

# basic settings ========================
set shell sh
set shellopts '-eu'
set scrolloff 10
set hidden true
set ignorecase true
set dirfirst on
set scrolloff 2
set info size:time

cmd mkdir ${{
  clear
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile %{{ printf "File Name: " ; read ans ; touch $ans }}

cmd chmod_bits %{{
  printf "Mode Bits: "
  read ans
  for file in "$fx"
  do
    chmod $ans $file
  done
  lf -remote 'send reload'
}}

cmd fzf_dir ${{
  res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd fasd_dir ${{
   res="$(fasd -dl | grep -iv cache | fzf 2>/dev/tty | sed 's/\\/\\\\/g;s/"/\\"/g')"
   if [ -d "$res" ]; then
      cmd="cd"
   else
      cmd="select"
   fi
 lf -remote "send $id $cmd \"$res\""
 }}

cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd delete ${{
    set -f
    clear
    printf "$fx\n"
    printf "delete?[y/n]"
    read ans
    [ $ans = "y" ] && rm -rf $fx
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}


# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}


cmd open_config  ${{
  $EDITOR $(bookmenu -b ~/.config/bookmenu/configs -f fzf -o)
}}


cmd dotfiles_log ${{
  clear
  dot log --graph --pretty=format:'\''%Cred%h%Creset -%C(yellow)%d%Creset \
  %s %Cgreen(%cs) %C(bold blue)<%an>%Creset'\'' --abbrev-commit'
}}

cmd dotfiles_status !{{
  clear
  dot status
}}

cmd dotfiles_removefromindex ${{
  clear
  dot status -s
  printf "$fx\n"
  printf "Remove these from the index? [y/n]"
  read ans
  if [ "$ans" = "y" ]; then
    dot restore --staged $fx
    printf "\nNieuwe status\n"
    dot status -s;
  fi
}}

cmd dotfiles_add ${{
  set -f
  clear
  printf "$fx\n"
  printf "\n"
  printf "These files are added, ok? [y/n]\n"
  read ans
  if [ "$ans" = "y" ]; then
      dot add $fx
      dot status;
  fi
}}

cmd dotfiles_commit ${{
  set -f
  clear
  dot status
  printf "These files will be committed, continue? [y/n]\n"
  read ans
  if [ "$ans" = "y" ]; then
      dot commit
      dot status;
  fi
}}


cmd git_log !{{
  clear
  git log --graph --pretty=format:'\''%Cred%h%Creset -%C(yellow)%d%Creset \
  %s %Cgreen(%cs) %C(bold blue)<%an>%Creset'\'' --abbrev-commit'
}}


cmd git_add ${{
  set -f
  clear
  printf "$fx\n"
  printf "\n"
  printf "These files are added, ok? [y/n]\n"
  read ans
  if [ "$ans" = "y" ]; then
      git add $fx
      git status;
  fi
}}


cmd git_removefromindex ${{
  clear
  git status -s
  printf "$fx\n"
  printf "Remove these from the index? [y/n]"
  read ans
  if [ "$ans" = "y" ]; then
    git restore --staged $fx
    printf "\nNieuwe status\n"
    git status -s;
  fi
}}


cmd git_status !{{
  clear
  git status
}}


# Bindings=======================================
# Remove some defaults
map "'"
map '"'


# new mappings ==================================
map <enter> shell
map . set hidden!
map DD delete

map b open_config

map gb cd /usr/bin
map gc cd ~/.config
map ge cd /etc
map gl cd ~/.local
map go fzf_dir
map gu cd /usr/share

map o
map ol dotfiles_log
map os dotfiles_status
map oa dotfiles_add
map oc dotfiles_commit
map or dotfiles_removefromindex

map H top
map L bottom
map R reload

map m
map md mkdir
map mf mkfile
map mb chmod_bits

map t
map tl git_log
map ts git_status
map ta git_add
map tr git_removefromindex

map d delete
map x cut

