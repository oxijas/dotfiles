#!/bin/sh
# jga lf config file

# basic settings ========================
#set shell sh
#set shellopts '-eu'
#aanpassingen voor zsh shell met spaties
set shell zsh
set shellopts '-euy'
set ifs "\n"
set filesep "\n"  # default already
set scrolloff 5
set hidden true
set ignorecase true
set dirfirst on
set info size:time
set ratios 1:2:3
set preview true
set cleaner ~/.config/lf/cleaner
set previewer ~/.config/lf/preview

cmd mkdir ${{
  clear
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile %{{ printf "File Name: " ; read ans ; touch $ans }}

cmd chmod_bits %{{
  printf "Mode Bits: "
  read ans
  for file in "$fx"
  do
    chmod $ans $file
  done
  lf -remote 'send reload'
}}

cmd mkhardlink ${{
  for file in "$fx"
  do
    ln $file $file.ln
  done
  unset file
}}

cmd fasd_dir ${{
   res="$(fasd -dl | grep -iv cache | fzf 2>/dev/tty | sed 's/\\/\\\\/g;s/"/\\"/g')"
   if [ -d "$res" ]; then
      cmd="cd"
   else
      cmd="select"
   fi
 lf -remote "send $id $cmd \"$res\""
 }}

cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd delete_files ${{
    set -f
    clear
    printf "$fx\n"
    printf "delete?[y/n]"
    read ans
    [ $ans = "y" ] && rm -rf $fx
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

#extract in a folder with name of filename
cmd extract_dir ${{
    set -f
  #create folder name without spaces
  tmpname=${$f##*/}
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip -d $tmpname  $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}



# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}


cmd open_config  ${{
  $EDITOR $(bookmenu -b ~/.config/bookmenu/configs -f fzf -o)
}}


cmd dotfiles_log ${{
  clear
  dot log --graph --oneline --abbrev-commit
}}

cmd dotfiles_status !{{
  clear
  dot status
}}

cmd dotfiles_removefromindex ${{
  clear
  dot status -s
  printf "$fx\n"
  printf "Remove these from the index? [y/n]"
  read ans
  if [ "$ans" = "y" ]; then
    dot restore --staged $fx
    printf "\nNieuwe status\n"
    dot status -s;
  fi
}}

cmd dotfiles_add ${{
  set -f
  clear
  printf "$fx\n"
  printf "\n"
  printf "These files are added, ok? [y/n]\n"
  read ans
  if [ "$ans" = "y" ]; then
      dot add $fx
      dot status;
  fi
}}

cmd dotfiles_commit ${{
  set -f
  clear
  dot status
  printf "These files will be committed, continue? [y/n]\n"
  read ans
  if [ "$ans" = "y" ]; then
      dot commit
      dot status;
  fi
}}

cmd dotfiles_push !{{
  set -f
  clear
  printf "Push dotfiles?[y/n]\n"
  read ans
  if [ "$ans" = "y" ]; then
      dot push
  fi
}}

cmd dotfiles_amend ${{
  set -f
  clear
  printf "Amend last commit?[y/n]\n"
  read ans
  if [ "$ans" = "y" ]; then
      dot commit --amend
  fi
}}


#log met $, niet ! want zit al less stop op
cmd git_log ${{
  #clear
  #git log --graph --pretty=format:'\''%Cred%h%Creset -%C(yellow)%d%Creset \
  #%s %Cgreen(%cs) %C(bold blue)<%an>%Creset'\'' --abbrev-commit'
  git log --oneline --graph
}}


cmd git_add ${{
  set -f
  clear
  printf "$fx\n"
  printf "\n"
  printf "These files are added, ok? [y/n]\n"
  read ans
  if [ "$ans" = "y" ]; then
      git add $fx
      git status;
  fi
}}


cmd git_removefromindex ${{
  clear
  git status -s
  printf "$fx\n"
  printf "Remove these from the index? [y/n]"
  read ans
  if [ "$ans" = "y" ]; then
    git restore --staged $fx
    printf "\nNieuwe status\n"
    git status -s;
  fi
}}


cmd git_status !{{
  clear
  git status
}}

cmd git_commit ${{
  set -f
  clear
  git status
  printf "These files will be committed, continue? [y/n]\n"
  read ans
  if [ "$ans" = "y" ]; then
      git commit
      git status;
  fi
}}

cmd git_push !{{
  set -f
  clear
  printf "Push git?[y/n]\n"
  read ans
  if [ "$ans" = "y" ]; then
      git push
  fi
}}

cmd bulkrename $vidir $fx

cmd bulk_rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    [ -n "$fs" ] && fs="$(ls)"
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l "$new")" -ne "$(wc -l "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

# Bindings=======================================
# Remove some defaults
map "'"
map '"'

# new mappings ==================================
map <enter> shell-wait
map <c-j> !$f
map . set hidden!
map d delete_files
map x cut

map b open_config

#map g - niet leegmaken, behoud gg(top) en gh(home)
map gb cd /usr/bin
map ge cd /etc
map gu cd /usr/share
#ook met g maar nu git commands
map gc git_commit
map gl git_log
map gs git_status
map ga git_add
map gp git_push

map o
map ol dotfiles_log
map os dotfiles_status
map oa dotfiles_add
map oc dotfiles_commit
map oC dotfiles_amend
map or dotfiles_removefromindex
map op dotfiles_push

map H top
map L bottom
map J half-down
map K half-up
map R bulkrename

map ze extract_dir
map zE extract
map zz zip

map m
map md mkdir
map mf mkfile
map mh mkhardlink
map mb chmod_bits

map tr git_removefromindex


